<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Etao Tsai</title>
    <link>https://realecto.github.io/etaotsai/</link>
    <description>Recent content on Etao Tsai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>etao.business.au@gmail.com (Etao Tsai)</managingEditor>
    <webMaster>etao.business.au@gmail.com (Etao Tsai)</webMaster>
    <copyright>Â© Yi-Tao Tsai, 2025</copyright>
    <atom:link href="https://realecto.github.io/etaotsai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Personal Website</title>
      <link>https://realecto.github.io/etaotsai/portfolio/personal_website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/personal_website/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;A personal website had always been on the project list, but I couldn&amp;rsquo;t find a suitable&#xA;stack to get started. My past experiences building web apps include using react, and frameworks like&#xA;Next.js.&lt;br&gt;&#xA;Seeing that a personal website contains mainly static content, and maybe a blog section.&#xA;I felt like it would be using the wrong tool for the job. Until I came across Hugo.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hugo&lt;/li&gt;&#xA;&lt;li&gt;CSS&lt;/li&gt;&#xA;&lt;li&gt;HTML&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I started by reading the Hugo documentations, setting up the environments and learning out the structures worked.&#xA;I like to get my hands dirty, so I picked out a theme and started reading the structure. After abit, I understood the&#xA;way Hugo works and started heavily modifying the theme &amp;ldquo;Bearcub&amp;rdquo;.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Revamped the structure, and colors&lt;/li&gt;&#xA;&lt;li&gt;Added animations, social icons, and a custom home page&lt;/li&gt;&#xA;&lt;li&gt;Added features like embedded pdfs, and gallery view&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I would ideally use tailwind CSS since that&amp;rsquo;s what I am familiar with, but this experience allowed me to refresh my memory on CSS&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
A personal website had always been on the project list, but I couldn&rsquo;t find a suitable
stack to get started. My past experiences building web apps include using react, and frameworks like
Next.js.<br>
Seeing that a personal website contains mainly static content, and maybe a blog section.
I felt like it would be using the wrong tool for the job. Until I came across Hugo.
<br>
<strong>How</strong></p>
<ul>
<li>Hugo</li>
<li>CSS</li>
<li>HTML</li>
</ul>
<p>I started by reading the Hugo documentations, setting up the environments and learning out the structures worked.
I like to get my hands dirty, so I picked out a theme and started reading the structure. After abit, I understood the
way Hugo works and started heavily modifying the theme &ldquo;Bearcub&rdquo;.
<br>
<strong>Result</strong></p>
<ul>
<li>Revamped the structure, and colors</li>
<li>Added animations, social icons, and a custom home page</li>
<li>Added features like embedded pdfs, and gallery view</li>
</ul>
<p>I would ideally use tailwind CSS since that&rsquo;s what I am familiar with, but this experience allowed me to refresh my memory on CSS</p>
]]></content:encoded>
    </item>
    <item>
      <title>Henosis Todo List App</title>
      <link>https://realecto.github.io/etaotsai/portfolio/henosis_todo_list_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/henosis_todo_list_app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;I was building react apps and was coming across alot of issues with the framework. Particularly inconvient error messages and bugs that ultimately got me nowhere. Still wanting to build a webapp for fun however, I searched online till I came across a great introduction to Next.js and decided to build something with it.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;\&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Next.js&lt;/li&gt;&#xA;&lt;li&gt;Tailwind CSS&lt;/li&gt;&#xA;&lt;li&gt;DragnDrog Module&lt;/li&gt;&#xA;&lt;li&gt;Firebase&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I build the frontend with Next.js and Tailwind. A simple todo list app consisted of looping through a list and rendering relevant html components. Making it looks good with tailwind. And then implementing drag n drop by using existing modules.&lt;br&gt;&#xA;I then connected Firebase with the application to realise OAuth and data store and retrive.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;A minimal, and reactive web app.&lt;br&gt;&#xA;I made my first ever mistake of not redacting my token, as I didn&amp;rsquo;t know anything about web apps prior to this project. So that&amp;rsquo;s one of the biggest takeaways I&amp;rsquo;ve rememberd till today.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
I was building react apps and was coming across alot of issues with the framework. Particularly inconvient error messages and bugs that ultimately got me nowhere. Still wanting to build a webapp for fun however, I searched online till I came across a great introduction to Next.js and decided to build something with it.
<br>
<strong>How</strong>\</p>
<ul>
<li>Next.js</li>
<li>Tailwind CSS</li>
<li>DragnDrog Module</li>
<li>Firebase</li>
</ul>
<p>I build the frontend with Next.js and Tailwind. A simple todo list app consisted of looping through a list and rendering relevant html components. Making it looks good with tailwind. And then implementing drag n drop by using existing modules.<br>
I then connected Firebase with the application to realise OAuth and data store and retrive.
<br>
<strong>Result</strong><br>
A minimal, and reactive web app.<br>
I made my first ever mistake of not redacting my token, as I didn&rsquo;t know anything about web apps prior to this project. So that&rsquo;s one of the biggest takeaways I&rsquo;ve rememberd till today.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Algorithmic Optimisations and Pathfinding</title>
      <link>https://realecto.github.io/etaotsai/portfolio/algorithmic_optimisations_and_pathfinding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/algorithmic_optimisations_and_pathfinding/</guid>
      <description>&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Optimising algorithms for space and time efficiency. Implemented many data structures such as&#xA;bitvectors, bloomfilters, queues, stack, and maps within ideal space and time efficiency.&lt;/li&gt;&#xA;&lt;li&gt;Solved various programming problems such as k-mer combinations, chain reactions, and graph problems with theoretical efficiency in mind&lt;/li&gt;&#xA;&lt;li&gt;Implemented pathfinding algorithms such as BFS and dijkstra. And using it to solve graph related problems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Understanding the use cases of data structures, how to implement them effectively.&lt;br&gt;&#xA;Studying the relationship between empirical and theoretical efficiency.&#xA;Studying various foundational programming problems, their place in our systems and how to solve them effectively.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>What</strong></p>
<ul>
<li>Optimising algorithms for space and time efficiency. Implemented many data structures such as
bitvectors, bloomfilters, queues, stack, and maps within ideal space and time efficiency.</li>
<li>Solved various programming problems such as k-mer combinations, chain reactions, and graph problems with theoretical efficiency in mind</li>
<li>Implemented pathfinding algorithms such as BFS and dijkstra. And using it to solve graph related problems.</li>
</ul>
<p><strong>Result</strong><br>
Understanding the use cases of data structures, how to implement them effectively.<br>
Studying the relationship between empirical and theoretical efficiency.
Studying various foundational programming problems, their place in our systems and how to solve them effectively.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Image Manipulation Program via Http</title>
      <link>https://realecto.github.io/etaotsai/portfolio/image_manipulation_program_via_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/image_manipulation_program_via_http/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C&lt;/li&gt;&#xA;&lt;li&gt;libFreeImage&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Implemented a multi-threaded server that listens in on a user or randomly selected port for TCP traffic,&#xA;validates it if it&amp;rsquo;s a valid HTTP request, parses the image, performs user determined manipulation on said image,&#xA;and sends it back to the user&amp;rsquo;s client.&lt;br&gt;&#xA;&lt;br&gt;&#xA;Implemented a user client that listens in on provided port, builds a valid HTTP request containing commands and image data. Validates response and parses the modified image. &lt;strong&gt;See at bottom right of image, showing before and after image manipulation&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Tools</strong></p>
<ul>
<li>C</li>
<li>libFreeImage</li>
</ul>
<p><strong>Result</strong><br>
Implemented a multi-threaded server that listens in on a user or randomly selected port for TCP traffic,
validates it if it&rsquo;s a valid HTTP request, parses the image, performs user determined manipulation on said image,
and sends it back to the user&rsquo;s client.<br>
<br>
Implemented a user client that listens in on provided port, builds a valid HTTP request containing commands and image data. Validates response and parses the modified image. <strong>See at bottom right of image, showing before and after image manipulation</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Intrusion Detection System</title>
      <link>https://realecto.github.io/etaotsai/portfolio/intrusion_detection_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/intrusion_detection_system/</guid>
      <description>&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;\&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;Scapy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Takes a series of instructions reminiscent of snort rules. Parse through a pcap file using scapy and identify suspicious packets.&#xA;Implement support for content filters, flag analysis, and time based thresholds defined within given ruleset.&lt;/p&gt;&#xA;&lt;p&gt;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;A IDS system that is able to parse and detect suspicious packets across a wide range of scenarios.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>How</strong>\</p>
<ul>
<li>Python</li>
<li>Scapy</li>
</ul>
<p>Takes a series of instructions reminiscent of snort rules. Parse through a pcap file using scapy and identify suspicious packets.
Implement support for content filters, flag analysis, and time based thresholds defined within given ruleset.</p>
<p><br>
<strong>Result</strong><br>
A IDS system that is able to parse and detect suspicious packets across a wide range of scenarios.</p>
]]></content:encoded>
    </item>
    <item>
      <title>CSV Proxy Extraction Automation</title>
      <link>https://realecto.github.io/etaotsai/portfolio/csv_proxy_extraction_automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>etao.business.au@gmail.com (Etao Tsai)</author>
      <guid>https://realecto.github.io/etaotsai/portfolio/csv_proxy_extraction_automation/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;br&gt;&#xA;During one of my projects, I had to utilise a series of proxies to bypass a limiter.&#xA;I got a CSV off the internet of various different proxies, but I was met with an issue.&#xA;The issue was that the interface took in a different format than what I required.&#xA;And thus, I decided to automate this manual process by writing a simple python script.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;How&lt;/strong&gt;&lt;br&gt;&#xA;I read the file and did some basic string manipulation.&#xA;&lt;br&gt;&#xA;&lt;strong&gt;Result&lt;/strong&gt;&lt;br&gt;&#xA;Formatted hundreds of proxies in seconds. Minutes including the scripting.&#xA;Automation via a scripting language is something that I find myself doing regularly,&#xA;and this is one of the most easily visualised examples.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Why</strong><br>
During one of my projects, I had to utilise a series of proxies to bypass a limiter.
I got a CSV off the internet of various different proxies, but I was met with an issue.
The issue was that the interface took in a different format than what I required.
And thus, I decided to automate this manual process by writing a simple python script.
<br>
<strong>How</strong><br>
I read the file and did some basic string manipulation.
<br>
<strong>Result</strong><br>
Formatted hundreds of proxies in seconds. Minutes including the scripting.
Automation via a scripting language is something that I find myself doing regularly,
and this is one of the most easily visualised examples.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
